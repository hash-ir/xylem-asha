export declare class Scrypt {
    private _XY;
    private _V;
    private _step;
    readonly N: number;
    readonly r: number;
    readonly p: number;
    constructor(N: number, r: number, p: number);
    deriveKey(password: Uint8Array, salt: Uint8Array, dkLen: number): Uint8Array;
    deriveKeyNonBlocking(password: Uint8Array, salt: Uint8Array, dkLen: number): Promise<Uint8Array>;
    clean(): void;
}
/**
 * Derives a key from password and salt with parameters
 * N — CPU/memory cost, r — block size, p — parallelization,
 * containing dkLen bytes.
 */
export declare function deriveKey(password: Uint8Array, salt: Uint8Array, N: number, r: number, p: number, dkLen: number): Uint8Array;
/**
 * Same as deriveKey, but performs calculation in a non-blocking way,
 * making sure to not take more than 100 ms per blocking calculation.
 */
export declare function deriveKeyNonBlocking(password: Uint8Array, salt: Uint8Array, N: number, r: number, p: number, dkLen: number): Promise<Uint8Array>;
