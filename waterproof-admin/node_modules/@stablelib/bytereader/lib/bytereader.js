"use strict";
// Copyright (C) 2016 Dmitry Chestnykh
// MIT License. See LICENSE file for details.
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Package bytereader implements byte array reader.
 */
var binary_1 = require("@stablelib/binary");
/**
 * ByteReader reads values from a byte array, keeping track of position.
 */
var ByteReader = /** @class */ (function () {
    function ByteReader(arr) {
        this._pos = 0;
        this.readUint8 = this.readByte;
        this._arr = arr;
        this._view = new DataView(this._arr.buffer, this._arr.byteOffset, this._arr.byteLength);
    }
    Object.defineProperty(ByteReader.prototype, "length", {
        /**
         * Gets the source length.
         */
        get: function () {
            return this._arr.length;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ByteReader.prototype, "unreadLength", {
        /**
         * Gets the number of unread bytes.
         */
        get: function () {
            return this._arr.length - this._pos;
        },
        enumerable: true,
        configurable: true
    });
    // Checks if len bytes can be read from buffer.
    // Throws if not.
    ByteReader.prototype._check = function (len) {
        if (this._pos + len > this._arr.length) {
            throw new Error("ByteReader: read out of bounds");
        }
    };
    // Advances position.
    ByteReader.prototype._advance = function (len) {
        this._pos += len;
    };
    /**
     * Returns a subarray of internal buffer.
     *
     * It is not recommended it use this function,
     * use read() instead, which will return a copy.
     */
    ByteReader.prototype.readNoCopy = function (length) {
        this._check(length);
        var result = this._arr.subarray(this._pos, this._pos + length);
        this._advance(length);
        return result;
    };
    ByteReader.prototype.read = function (length) {
        return new Uint8Array(this.readNoCopy(length));
    };
    ByteReader.prototype.readByte = function () {
        this._check(1);
        var n = this._arr[this._pos];
        this._advance(1);
        return n;
    };
    ByteReader.prototype.readInt16BE = function () {
        this._check(2);
        var n = this._view.getInt16(this._pos, false);
        this._advance(2);
        return n;
    };
    ByteReader.prototype.readUint16BE = function () {
        this._check(2);
        var n = this._view.getUint16(this._pos, false);
        this._advance(2);
        return n;
    };
    ByteReader.prototype.readInt16LE = function () {
        this._check(2);
        var n = this._view.getInt16(this._pos, true);
        this._advance(2);
        return n;
    };
    ByteReader.prototype.readUint16LE = function () {
        this._check(2);
        var n = this._view.getUint16(this._pos, true);
        this._advance(2);
        return n;
    };
    ByteReader.prototype.readInt32BE = function () {
        this._check(4);
        var n = this._view.getInt32(this._pos, false);
        this._advance(4);
        return n;
    };
    ByteReader.prototype.readUint32BE = function () {
        this._check(4);
        var n = this._view.getUint32(this._pos, false);
        this._advance(4);
        return n;
    };
    ByteReader.prototype.readInt32LE = function () {
        this._check(4);
        var n = this._view.getInt32(this._pos, true);
        this._advance(4);
        return n;
    };
    ByteReader.prototype.readUint32LE = function () {
        this._check(4);
        var n = this._view.getUint32(this._pos, true);
        this._advance(4);
        return n;
    };
    ByteReader.prototype.readInt64BE = function () {
        this._check(8);
        var n = binary_1.readInt64BE(this._arr, this._pos);
        this._advance(8);
        return n;
    };
    ByteReader.prototype.readUint64BE = function () {
        this._check(8);
        var n = binary_1.readUint64BE(this._arr, this._pos);
        this._advance(8);
        return n;
    };
    ByteReader.prototype.readInt64LE = function () {
        this._check(8);
        var n = binary_1.readInt64LE(this._arr, this._pos);
        this._advance(8);
        return n;
    };
    ByteReader.prototype.readUint64LE = function () {
        this._check(8);
        var n = binary_1.readUint64LE(this._arr, this._pos);
        this._advance(8);
        return n;
    };
    ByteReader.prototype.readUintBE = function (bitLength) {
        this._check(bitLength / 8);
        var n = binary_1.readUintBE(bitLength, this._arr, this._pos);
        this._advance(bitLength / 8);
        return n;
    };
    ByteReader.prototype.readUintLE = function (bitLength) {
        this._check(bitLength / 8);
        var n = binary_1.readUintLE(bitLength, this._arr, this._pos);
        this._advance(bitLength / 8);
        return n;
    };
    ByteReader.prototype.readFloat32BE = function () {
        this._check(4);
        var n = this._view.getFloat32(this._pos, false);
        this._advance(4);
        return n;
    };
    ByteReader.prototype.readFloat32LE = function () {
        this._check(4);
        var n = this._view.getFloat32(this._pos, true);
        this._advance(4);
        return n;
    };
    ByteReader.prototype.readFloat64BE = function () {
        this._check(8);
        var n = this._view.getFloat64(this._pos, false);
        this._advance(8);
        return n;
    };
    ByteReader.prototype.readFloat64LE = function () {
        this._check(8);
        var n = this._view.getFloat64(this._pos, true);
        this._advance(8);
        return n;
    };
    ByteReader.prototype.seek = function (n) {
        if (n < 0) {
            // Seek backward.
            if (this._pos + n < 0) {
                throw new Error("ByteReader: trying to seek out of bounds");
            }
            this._pos += n;
        }
        else if (n > 0) {
            // Seek forward.
            if (this._pos + n >= this._arr.length) {
                throw new Error("ByteReader: trying to seek out of bounds");
            }
            this._pos += n;
        }
        else {
            // n == 0, seek to beginning.
            this._pos = 0;
        }
        return this;
    };
    return ByteReader;
}());
exports.ByteReader = ByteReader;
//# sourceMappingURL=bytereader.js.map