/**
 * ByteReader reads values from a byte array, keeping track of position.
 */
export declare class ByteReader {
    private _arr;
    private _view;
    private _pos;
    constructor(arr: Uint8Array);
    /**
     * Gets the source length.
     */
    get length(): number;
    /**
     * Gets the number of unread bytes.
     */
    get unreadLength(): number;
    private _check;
    private _advance;
    /**
     * Returns a subarray of internal buffer.
     *
     * It is not recommended it use this function,
     * use read() instead, which will return a copy.
     */
    readNoCopy(length: number): Uint8Array;
    read(length: number): Uint8Array;
    readByte(): number;
    readUint8: () => number;
    readInt16BE(): number;
    readUint16BE(): number;
    readInt16LE(): number;
    readUint16LE(): number;
    readInt32BE(): number;
    readUint32BE(): number;
    readInt32LE(): number;
    readUint32LE(): number;
    readInt64BE(): number;
    readUint64BE(): number;
    readInt64LE(): number;
    readUint64LE(): number;
    readUintBE(bitLength: number): number;
    readUintLE(bitLength: number): number;
    readFloat32BE(): number;
    readFloat32LE(): number;
    readFloat64BE(): number;
    readFloat64LE(): number;
    seek(n: number): this;
}
