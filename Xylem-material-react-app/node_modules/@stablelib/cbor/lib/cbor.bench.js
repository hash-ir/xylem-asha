"use strict";
// Copyright (C) 2016 Dmitry Chestnykh
// MIT License. See LICENSE file for details.
Object.defineProperty(exports, "__esModule", { value: true });
var cbor_1 = require("./cbor");
var benchmark_1 = require("@stablelib/benchmark");
var buf = benchmark_1.byteSeq(128);
var value = {
    someBytes: buf,
    someString: "this is a string needed to benchmark CBOR encoder and decoder",
    someNumbersInArray: [
        0.1234,
        1.1,
        3.4028234663852886e+38,
        65536,
        232992399333333,
        Infinity
    ],
    someBoolean: true,
    someUndefined: undefined,
    someObject: {
        someNullsAndTagged: [null, null, null, new cbor_1.Tagged(32, "something")],
        anotherString: "hey",
        anotherBytes: new Uint8Array([1, 2, 3]),
        date: new Date(0),
        regexp: /^a[bc]+/gi
    }
};
var encodedValue = cbor_1.encode(value);
var bigBuf = benchmark_1.byteSeq(1024);
var encodedBigBuf = cbor_1.encode(bigBuf);
// Benchmark report MiB/s for encoded MiB.
benchmark_1.report("CBOR encode", benchmark_1.benchmark(function () { return cbor_1.encode(value); }, encodedValue.length));
benchmark_1.report("CBOR decode", benchmark_1.benchmark(function () { return cbor_1.decode(encodedValue); }, encodedValue.length));
benchmark_1.report("CBOR encode bytes", benchmark_1.benchmark(function () { return cbor_1.encode(bigBuf); }, bigBuf.length));
benchmark_1.report("CBOR decode bytes", benchmark_1.benchmark(function () { return cbor_1.decode(encodedBigBuf); }, encodedBigBuf.length));
// JSON for comparison
var jsonEncodedValue = JSON.stringify(value);
benchmark_1.report("JSON encode", benchmark_1.benchmark(function () { return JSON.stringify(value); }, encodedValue.length));
benchmark_1.report("JSON decode", benchmark_1.benchmark(function () { return JSON.parse(jsonEncodedValue); }, encodedValue.length));
//# sourceMappingURL=cbor.bench.js.map