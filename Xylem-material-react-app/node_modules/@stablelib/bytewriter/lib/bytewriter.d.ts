/**
 * ByteWriter is a convenient way to combine bytes into Uint8Array.
 */
export declare class ByteWriter {
    private _prev;
    private _arr;
    private _pos;
    private _len;
    private _view;
    private _finished;
    /**
     * Creates a new ByteWriter with the optional initial capacity.
     */
    constructor(initialCapacity?: number);
    /**
     * Returns the current total length of byte array.
     */
    get length(): number;
    private _resize;
    private _ensureSpace;
    /**
     * Resets position.
     */
    reset(): this;
    /**
     * Returns the resulting byte array.
     */
    finish(): Uint8Array;
    clean(): void;
    write(arr: Uint8Array): this;
    writeMany(arrays: Uint8Array[]): this;
    writeByte(byte: number): this;
    writeUint8: (byte: number) => this;
    writeUint16BE(value: number): this;
    writeInt16BE(value: number): this;
    writeUint16LE(value: number): this;
    writeInt16LE(value: number): this;
    writeUint32BE(value: number): this;
    writeInt32BE(value: number): this;
    writeUint32LE(value: number): this;
    writeInt32LE(value: number): this;
    writeUint64BE(value: number): this;
    writeInt64BE: (value: number) => this;
    writeUint64LE(value: number): this;
    writeInt64LE: (value: number) => this;
    writeUintLE(bitLength: number, value: number): this;
    writeUintBE(bitLength: number, value: number): this;
    writeFloat32BE(value: number): this;
    writeFloat32LE(value: number): this;
    writeFloat64BE(value: number): this;
    writeFloat64LE(value: number): this;
}
