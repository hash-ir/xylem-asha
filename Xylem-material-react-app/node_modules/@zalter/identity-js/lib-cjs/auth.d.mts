import { EventEmitter } from './event-emitter.mjs';
import { User } from './user.mjs';
declare type CodeFlow = 'start' | 'finalize';
declare type LinkFlow = 'start' | 'finalize';
interface CodeStartParams {
    email?: string;
    phoneNumber?: string;
}
interface CodeFinalizeParams {
    code: string;
}
interface LinkStartParams {
    email: string;
    redirectUri: string;
}
interface LinkFinalizeParams {
    token: string;
}
interface VerifyMfaChallengeParams {
    factorId: string;
    code: string;
}
interface AuthConfig {
    projectId: string;
    endpoint?: {
        authority: string;
        scheme: 'http' | 'https';
    };
}
/**
 * A client for the Zalter Identity Service API.
 */
export declare class Auth {
    #private;
    readonly emitter: EventEmitter;
    /**
     * @param {AuthConfig} config
     */
    constructor(config: AuthConfig);
    /**
     * Return the authentication state.
     * @return {Promise<boolean>}
     */
    isAuthenticated(): Promise<boolean>;
    /**
     * Get the authenticated user.
     * @return {Promise<any>}
     */
    getCurrentUser(): Promise<User | null>;
    /**
     * Sign in with a code.
     * @param {"start" | "finalize"} flow
     * @param {unknown} params
     * @return {Promise<void>}
     */
    signInWithCode(flow: CodeFlow, params: CodeStartParams | CodeFinalizeParams): Promise<any>;
    /**
     * Sign in with a link.
     * @param {"start" | "finalize"} flow
     * @param {unknown} params
     * @return {Promise<void>}
     */
    signInWithLink(flow: LinkFlow, params: LinkStartParams | LinkFinalizeParams): Promise<any>;
    /**
     * Verify MFA challenge.
     * @param {Object} params
     * @return {Promise<any>}
     */
    verifyMfaChallenge(params: VerifyMfaChallengeParams): Promise<any>;
    /**
     * Sign out.
     * @param {boolean} [globalSignOut = true] - Sign out from server
     * @return {Promise<void>}
     */
    signOut(globalSignOut?: boolean): Promise<void>;
}
export {};
